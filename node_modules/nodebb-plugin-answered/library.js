'use strict';
const plugin = {};
const db = require.main.require('./src/database');

plugin.init = function(params, callback) {
  // Optionally log or perform actions when NodeBB starts and plugin loads
  console.log("Answered/Unanswered plugin loaded");
  if (typeof callback === 'function') {
    callback();
  }
};

plugin.onTopicSave = async function(data) {
  try {
    const topicId = data.topic ? data.topic.tid : data.tid;
    // Set default answered status as false when a new topic is created
    await db.setObjectField(`topic:${topicId}`, 'answered', false);
  } catch (err) {
    console.error("Error setting default answer status", err);
  }
};

plugin.addRoutes = function(params, callback) {
  const { router, middleware, helpers } = params;
  const apiUri = '/topic/:tid/answer-status';

  // Route to get the answer status of a topic
  router.get(`/api${apiUri}`, middleware.authenticateRequest, async (req, res) => {
    const { tid } = req.params;
    try {
      const answered = await db.getObjectField(`topic:${tid}`, 'answered');
      res.json({ answered: answered === 'true' || answered === true });
    } catch (err) {
      res.status(500).json({ error: 'Unable to fetch answer status' });
    }
  });

  // Route to toggle/update the answer status (for authorized users like instructors)
  router.put(`/api${apiUri}`, middleware.authenticateRequest, async (req, res) => {
    const { tid } = req.params;
    const { answered } = req.body;   // expecting a boolean in request body
    try {
      await db.setObjectField(`topic:${tid}`, 'answered', answered);
      res.json({ tid: tid, answered: answered });
    } catch (err) {
      res.status(500).json({ error: 'Unable to update answer status' });
    }
  });

  if (typeof callback === 'function') {
    callback();
  }
};

plugin.addAnswerDataToTopic = async function(data) {
  // data is the object used to render topic.tpl
  if (data.topic) {
    try {
      const answered = await db.getObjectField(`topic:${data.topic.tid}`, 'answered');
      data.topic.answered = answered === 'true' || answered === true;
    } catch (err) {
      console.error("Error fetching answer status for topic", err);
      data.topic.answered = false;
    }
  }
  return data;
};

module.exports = plugin;
