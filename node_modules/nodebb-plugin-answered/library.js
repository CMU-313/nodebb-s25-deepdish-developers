'use strict';

const plugin = {};
const db = require.main.require('./src/database');
const user = require.main.require('./src/user');
const Groups = require.main.require('./src/groups');

plugin.init = function(params, callback) {
  const app = params.app;

  // Define route to toggle answered status
  app.put('/api/topic/:tid/answer-status', async (req, res) => {
    try {
      // Ensure user is logged in
      if (!req.user || !req.user.uid) {
        return res.status(403).json({ error: 'Not authorized' });
      }

      const tid = req.params.tid;
      const newStatus = !!req.body.answered; // convert to boolean
      // OPTIONAL: check if user is allowed (e.g., isAdmin, isModerator, or belongs to 'instructors')
      const isAdmin = req.user.isAdmin;
      const isMod = await user.isModerator(req.user.uid, tid);
      // Or check group membership: await Groups.isMember(req.user.uid, 'instructors');

      if (!isAdmin && !isMod) {
        return res.status(403).json({ error: 'No permission to toggle answered status.' });
      }

      // Update DB: set "answered" field to "true" or "false"
      await db.setObjectField(`topic:${tid}`, 'answered', newStatus);

      return res.json({ tid: tid, answered: newStatus });
    } catch (err) {
      console.error('Error toggling answered status:', err);
      return res.status(500).json({ error: err.message });
    }
  });

  console.log('nodebb-plugin-answered initialized');
  if (typeof callback === 'function') {
    callback();
  }
};

plugin.onTopicBuild = async function(data, callback) {
  try {
    const topicData = data.templateData.topic;
    if (!topicData) {
      return callback(null, data);
    }

    // Fetch 'answered' field from DB
    const answeredValue = await db.getObjectField(`topic:${topicData.tid}`, 'answered');
    topicData.answered = (answeredValue === 'true');

    // Decide if current user can toggle the status
    // For demonstration, let's show toggle if user is admin or moderator
    let canToggle = false;
    if (data.req.user && data.req.user.uid) {
      const isAdmin = data.req.user.isAdmin;
      const isMod = await user.isModerator(data.req.user.uid, topicData.tid);
      canToggle = (isAdmin || isMod);
    }

    data.templateData.showToggle = canToggle;

    return callback(null, data);
  } catch (err) {
    console.error('Error in onTopicBuild:', err);
    return callback(null, data);
  }
};

plugin.onTopicSave = async function(data) {
  // Optionally set answered to false for new topics
  const topicId = data.topic ? data.topic.tid : data.tid;
  try {
    // If no 'answered' field exists yet, set to false
    await db.setObjectField(`topic:${topicId}`, 'answered', false);
  } catch (err) {
    console.error('Failed to set default answered status', err);
  }
};

module.exports = plugin;
